[{"/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/index.js":"1","/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/reportWebVitals.js":"2","/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/App.js":"3","/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/Events.js":"4","/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/Songs.js":"5","/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/EventsList.js":"6"},{"size":500,"mtime":1609220905233,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1609220905268,"results":"9","hashOfConfig":"8"},{"size":6634,"mtime":1609578116116,"results":"10","hashOfConfig":"8"},{"size":1081,"mtime":1609576817209,"results":"11","hashOfConfig":"8"},{"size":768,"mtime":1609368525190,"results":"12","hashOfConfig":"8"},{"size":2322,"mtime":1609578146707,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"13lruti",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/index.js",[],["28","29"],"/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/reportWebVitals.js",[],"/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/App.js",["30"],"import React, { useState, useEffect } from \"react\";\nimport EventsList from \"./EventsList\";\nimport Songs from \"./Songs\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nfunction App() {\n  // Constant var\n  const firstQuery = \"drake\";\n  const unavailable_Msg = \"Unavailable\";\n  const unavailable_Url = \"#\";\n  const unavailable_ImgUrl =\n    \"https://visualsound.com/2020products/smart-inventory-clearance/unavailable-image/\";\n  const DATE_all = \"date_all\";\n  const DATE_seven = \"date_seven\";\n  const DATE_thirty = \"date_thirty\";\n  const DATE_sixty = \"date_sixty\";\n\n  // Ticketmaster API info\n  const TM_package = \"discovery\";\n  const TM_version = \"v2\";\n  const TM_resource = \"events\";\n  const TM_KEY = \"dGXKBPj0zD1ARGi7QiTmFTBghh6PAw5f\";\n\n  const [inputText, setInputText] = useState(\"\");\n  const [query, setQuery] = useState(firstQuery);\n  const [events, setEvents] = useState([]);\n  const [songs, setSongs] = useState([]);\n  const [status, setStatus] = useState(DATE_all);\n  const [filterEvents, setFilterEvents] = useState([]);\n\n  // SEARCHING STUFF\n  const updateInput = (e) => {\n    setInputText(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    // prevent page from refreshing\n    e.preventDefault();\n    setQuery(inputText);\n    setInputText(\"\");\n  };\n\n  // API STUFF\n  useEffect(() => {\n    // fetching ticket master info\n    getEvents(query);\n\n    // fetching spotify info\n    getSongs(query);\n  }, [query]);\n\n  // request songs\n  const getSongs = async (searchQuery) => {\n    // replace space with \"+\"\n    const processedQuery = searchQuery.replace(\" \", \"+\");\n    const song_response = await fetch(\n      `https://itunes.apple.com/search?term=${processedQuery}&limit=10&media=music`\n    );\n\n    const song_data = await song_response.json();\n    try {\n      setSongs(song_data.results);\n    } catch (err) {\n      setSongs([]);\n    }\n  };\n\n  // request events\n  const getEvents = async (searchQuery) => {\n    // replace space with dash\n    const processedQuery = searchQuery.replace(\" \", \"-\");\n    const TM_response = await fetch(\n      `https://app.ticketmaster.com/${TM_package}/${TM_version}/${TM_resource}.json?keyword=${processedQuery}&apikey=${TM_KEY}`\n    );\n\n    const TM_data = await TM_response.json();\n    // prevent not finding events\n    try {\n      setEvents(TM_data._embedded.events);\n    } catch (err) {\n      setEvents([]);\n    }\n  };\n\n  const songNotFound = () => {\n    return (\n      <div className=\"noSongMsg\">\n        <h2>No Songs Found</h2>\n      </div>\n    );\n  };\n\n  // DROPDOWN MENU STUFF\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  };\n\n  // filter events handler when dropdown options selected\n  useEffect(() => {\n    filterEventsHandler();\n  }, [status]);\n\n  // filter events handler when new search\n  useEffect(() => {\n    setFilterEvents(events);\n    document.getElementById(\"selectMenu\").selectedIndex = 0;\n  }, [events]);\n\n  const filterEventsHandler = () => {\n    switch (status) {\n      case DATE_seven:\n        setFilterEvents(events.filter((event) => withinDateRange(event, 7)));\n        break;\n      case DATE_thirty:\n        setFilterEvents(events.filter((event) => withinDateRange(event, 30)));\n        break;\n      case DATE_sixty:\n        setFilterEvents(events.filter((event) => withinDateRange(event, 60)));\n        break;\n      default:\n        setFilterEvents(events);\n        break;\n    }\n  };\n\n  const withinDateRange = (event, range) => {\n    let date = new Date();\n    date.setDate(date.getDate() + range);\n    const eventDate = new Date(event.dates.start.dateTime);\n    return eventDate.getTime() <= date.getTime();\n  };\n\n  // for testing\n  useEffect(() => {\n    filterEvents.forEach((event) => {\n      console.log(event);\n    });\n  }, [filterEvents]);\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={inputText}\n          onChange={updateInput}\n          placeholder=\"Enter a keyword (e.g. Artist's Name)\"\n        />\n        <button className=\"btn btn-primary\" type=\"submit\">\n          <i className=\"fas fa-search\"></i>\n        </button>\n        <div className=\"filter-date\">\n          <select\n            id=\"selectMenu\"\n            className=\"btn btn-secondary\"\n            onChange={statusHandler}\n          >\n            <option value={DATE_all}>All</option>\n            <option value={DATE_seven}>In 7 days</option>\n            <option value={DATE_thirty}>In 30 days</option>\n            <option value={DATE_sixty}>In 60 days</option>\n          </select>\n        </div>\n      </form>\n      <div className=\"field\">\n        <div className=\"events\">\n          <EventsList\n            filteredEvents={filterEvents}\n            events={events}\n            unavailable_Msg={unavailable_Msg}\n            unavailable_ImgUrl={unavailable_ImgUrl}\n            unavailable_Url={unavailable_Url}\n          />\n        </div>\n        <div className=\"container\">\n          <table className=\"table table-dark table-hover\">\n            <thead>\n              <tr>\n                <td>TITLE</td>\n                <td>ARTIST</td>\n                <td>ALBUM</td>\n                <td>PREVIEW</td>\n              </tr>\n            </thead>\n            <tbody>\n              {songs && songs.length > 0\n                ? songs.map((song) => (\n                    <Songs\n                      name={song.artistName ? song.artistName : unavailable_Msg}\n                      trackName={\n                        song.trackName ? song.trackName : unavailable_Msg\n                      }\n                      albumName={\n                        song.collectionName\n                          ? song.collectionName\n                          : unavailable_Msg\n                      }\n                      artistUrl={\n                        song.artistViewUrl\n                          ? song.artistViewUrl\n                          : unavailable_Url\n                      }\n                      trackUrl={\n                        song.trackViewUrl ? song.trackViewUrl : unavailable_Url\n                      }\n                      albumUrl={\n                        song.collectionViewUrl\n                          ? song.collectionViewUrl\n                          : unavailable_Url\n                      }\n                      previewUrl={\n                        song.previewUrl ? song.previewUrl : unavailable_Url\n                      }\n                    />\n                  ))\n                : songNotFound()}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/Events.js",[],"/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/Songs.js",[],"/mnt/c/Users/presl/Desktop/react/vibecheck-app/src/EventsList.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":102,"column":6,"nodeType":"37","endLine":102,"endColumn":14,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterEventsHandler'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [filterEventsHandler, status]",{"range":"44","text":"45"},[2721,2729],"[filterEventsHandler, status]"]